#!/bin/bash

: <<-EOF
# Usage
	cd u-boot
	make -C . ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- firefly-rk3399_defconfig
	make -C . ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- idbloader.img
	(cd ../tiny-rk3399; git add mk-patch; git clean -df .)
	../tiny-rk3399/mk-patch
	make -C ../tiny-rk3399 ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- idbloader.img
	EOF

set -o nounset

CMD=$(realpath "$0")
PTH_DIR=$(dirname "$CMD")

files=

# *PART1*
# files="${files} $(find . ! \( -name 'tpl' -prune \) ! \( -name 'spl' -prune \) -name '*.o' )"
# files="${files} dts/Makefile"
# files="${files} arch/arm/dts/Makefile"
# files="${files} examples/Makefile"

# required if no *PART1*
files="${files} $(find scripts -name '*.o' )"
files="${files} $(find tools   -name '*.o' )"
files="${files} include/trace.h"

# *PART2*
files="${files} $(find tpl -name '*.o' )"
files="${files} $(find spl -name '*.o' )"
# required if no PART2
# files="${files} include/atf_common.h"
# files="${files} include/common.h"
# files="${files} arch/arm/mach-rockchip/bootrom.c"
# files="${files} arch/arm/mach-rockchip/spl.c"
# files="${files} arch/arm/mach-rockchip/spl-boot-order.c"
# files="${files} arch/arm/mach-rockchip/tpl.c"
# files="${files} arch/arm/include/asm/mach-types.h"
# files="${files} arch/arm/lib/spl.c"
# files="${files} common/spl/spl.c"
# files="${files} common/spl/spl_atf.c"
# files="${files} common/spl/spl_bootrom.c"
# files="${files} common/spl/spl_fit.c"
# files="${files} common/spl/spl_mmc.c"
# files="${files} common/common_fit.c"
# files="${files} lib/tiny-printf.c"
files="${files} include/u-boot/u-boot.lds.h"


files="${files} arch/arm/dts/rk3399-firefly.dtb"

files="${files} scripts/Kbuild.include"
files="${files} scripts/Kconfig.include"
files="${files} scripts/Makefile.build"
files="${files} scripts/Makefile.uncmd_spl"
files="${files} scripts/Makefile.lib"
files="${files} scripts/Makefile.host"
files="${files} scripts/Makefile.extrawarn"
files="${files} scripts/Makefile.autoconf"
files="${files} scripts/Makefile.clean"
files="${files} scripts/Makefile.spl"

files="${files} scripts/basic/fixdep.c"

files="${files} scripts/kconfig/conf.c"
files="${files} scripts/kconfig/confdata.c"
files="${files} scripts/kconfig/expr.h"
files="${files} scripts/kconfig/expr.c"
files="${files} scripts/kconfig/list.h"
files="${files} scripts/kconfig/lkc.h"
files="${files} scripts/kconfig/lkc_proto.h"
files="${files} scripts/kconfig/menu.c"
files="${files} scripts/kconfig/kconf_id.c"
files="${files} scripts/kconfig/preprocess.c"
files="${files} scripts/kconfig/symbol.c"
files="${files} scripts/kconfig/util.c"
files="${files} scripts/kconfig/zconf.l"
files="${files} scripts/kconfig/zconf.y"

files="${files} scripts/check-config.sh"
files="${files} scripts/gcc-version.sh"
files="${files} scripts/gcc-stack-usage.sh"
files="${files} scripts/setlocalversion"
files="${files} scripts/dtc/dtc-lexer.l"
files="${files} scripts/dtc/dtc-parser.y"

# Makefiles
files="${files} config.mk"
files="${files} arch/arm/config.mk"
files="${files} arch/arm/cpu/armv8/config.mk"


# Configurations
files="${files} .config"
files="${files} configs/firefly-rk3399_defconfig"
# files="${files} Kconfig"
# files="${files} arch/Kconfig"
# files="${files} arch/arm/Kconfig"
# files="${files} arch/arm/Kconfig.debug"
# files="${files} arch/arm/mach-rockchip/Kconfig"
# files="${files} arch/arm/mach-rockchip/rk3399/Kconfig"
# files="${files} board/rockchip/evb_rk3399/Kconfig"
# files="${files} common/Kconfig.boot"
files="${files} arch/arm/cpu/armv8/u-boot.lds"
files="${files} arch/arm/cpu/armv8/u-boot-spl.lds"
# files="${files} arch/arm/lib/crt0_aarch64_efi.S"
# files="${files} arch/arm/lib/elf_aarch64_efi.lds"

# Extra tools
files="${files} tools/gen_eth_addr.c"
files="${files} tools/img2srec.c"
files="${files} tools/proftool.c"
files="${files} tools/relocate-rela.c"
files="${files} tools/spl_size_limit.c"
files="${files} tools/scripts/define2mk.sed"

# Prepare targets
files="${files} include/config/auto.conf"
files="${files} include/autoconf.mk"
files="${files} tpl/include/autoconf.mk"
files="${files} spl/include/autoconf.mk"
files="${files} include/generated/autoconf.h"
files="${files} include/generated/asm-offsets.h"
files="${files} include/generated/generic-asm-offsets.h"

# echo files="$files"
# exit 0

function copy_file() {
	full=$(realpath --relative-to=. "$1")

	[ -f "$PTH_DIR/$full" ] || {
		echo "$full" --\> "$PTH_DIR/$full"
		cp -a --parents "$full" "$PTH_DIR"
	}
}

declare -A includes

# shellcheck disable=SC2154
includes["include/host_arch.h"]=1

for i in $files; do
	name=$(basename "$i")
	dir=$(dirname "$i")
	dir1=${dir#*/}

	echo ... "$dir/$name"

	[ -s "$dir/Makefile" ] && copy_file "$dir/Makefile"
	[ -s "$dir1/Makefile" ] && copy_file "$dir1/Makefile"
	# [ -s "$dir/Kconfig" ] && copy_file "$dir/Kconfig"

	[ "${name:0-2}" = ".o" -o "${name:0-4}" = ".dtb" ] || {
		[ -s "$dir/$name" ] && copy_file "$dir/$name"
		continue
	}

	[ "${name}" = "built-in.o" ] && continue

	mn=${name%.o}
	[ "$mn" == "$name" ] && mn=${name%.dtb}

	srcf=""
	[ -s "$dir/$mn.c" ] && srcf="$dir/$mn.c"
	[ -s "$dir/$mn.S" ] && srcf="$dir/$mn.S"
	[ -s "$dir/$mn.dts" ] && srcf="$dir/$mn.dts"
	[ -s "$dir1/$mn.c" ] && srcf="$dir1/$mn.c"
	[ -s "$dir1/$mn.S" ] && srcf="$dir1/$mn.S"
	[ -n "$srcf" ] && {
		[ -f "$srcf" ] && copy_file "$srcf"

		[ -s "$dir/.$name.cmd" ] && {
			for d in $(make -f "$PTH_DIR/retrieve_dep.make" OBJF="$i" "$i"); do
				includes["$d"]=1
			done
		}
	}
done

echo "### INCLUDES"
for i in $(echo "${!includes[@]}" | sort); do
	[ "${i:0:1}" = "/" ] && continue
	copy_file "$i"
done

find "$PTH_DIR/" -type f -size 0 -exec rm -f {} \;
[ -d "$PTH_DIR/arch/arm/include/asm/arch" ] || {
	(cd "$PTH_DIR/arch/arm/include/asm"; ln -sr arch-rk3399 arch)
}

